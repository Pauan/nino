JavaScript (32 lines):

  chrome.windows.getAll({ populate: true }, function (a) {
    readWriteDB(o, "tabs", function (o) {
      function doit() {
        var i = 0;
        each(a, function (w) {
          if (w.type === "normal") {
            each(w.tabs, function (t) {
              t.index = i++;
              var s = urlToId(t.url);
              if (!ignoreId[s]) {
                o.put(addChromeTab(s, t));
              }
            });
            winIds[w.id] = true;
          }
        });
        if (--iInit === 0) {
          init();
        }
      }
      o.openCursor().onsuccess = function (e) {
        var cursor = e.target.result;
        if (cursor) {
          var t = cursor.value;
          tabs[t.id] = diskToTab(t);
          cursor.continue();
        } else {
          doit();
        }
      };
    });
  });

Ruby (32 lines):

  chrome.windows.getAll { populate: true } do |a|
    readWriteDB o, "tabs" do |o|
      def doit
        i = 0
        a.each do |w|
          if w.type == "normal"
            w.tabs.each do |t|
              t.index = ++i
              s = urlToId t.url
              if !ignoreId[s]
                o.put addChromeTab s, t
              end
            end
            winIds[w.id] = true
          end
        end
        if --iInit == 0
          init()
        end
      end
      o.openCursor().onsuccess = lambda do |e|
        cursor = e.target.result
        if cursor
          t = cursor.value
          tabs[t.id] = diskToTab t
          cursor.continue()
        else
          doit()
        end
      end
    end
  end

CoffeeScript (22 lines):

  chrome.windows.getAll { populate: true }, (a) ->
    readWriteDB o, "tabs", (o) ->
      doit = ->
        i = 0
        for w in a
          if w.type is "normal"
            for t in w.tabs
              t.index = ++i
              s = urlToId t.url
              if !ignoreId[s]
                o.put addChromeTab s, t
            winIds[w.id] = true
        if --iInit is 0
          init()
      o.openCursor().onsuccess = (e) ->
        cursor = e.target.result
        if cursor
          t = cursor.value
          tabs[t.id] = diskToTab t
          cursor.continue()
        else
          doit()

Nino (20 lines):

  (chrome.windows.getAll [ "populate" true ] -> a
    (readWriteDB o "tabs" -> o
      (def doit ->
        (var i 0)
        (each a -> w
          (when w.type = "normal"
            (each w.tabs -> t
              (t.index || ++i)
              (let s (urlToId t.url)
                (when ~ignoreId[s]
                  (o.put (addChromeTab s t)))))
            (winIds[w.id] || true)))
        (when --iInit = 0
          (init)))
      ((o.openCursor).onsuccess || -> e
        (iflet cursor e.target.result
          (let t cursor.value
            (tabs[t.id] || (diskToTab t))
            (cursor.continue))
          (doit)))))
