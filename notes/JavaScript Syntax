Here are some of the unusual JavaScript syntax quirks I've discovered.
This is vital information when trying to compile to JavaScript.

---

This isn't specific to JavaScript, and it's not a quirk, but it's still
useful to know. Consider the following expression:

  1 + (2 + 3)

If you were trying to minify that, you can't safely remove the parentheses
because of potential rounding errors and such with floating point numbers.
However, if you flip the arguments, you get the same behavior sans parens:

  2 + 3 + 1

This results in smaller minified code. You can do this with all binary
left-associative operators in JavaScript. But make sure not to flip them in
the following situation:

  (1 + 2) + (3 + 4)

Ordinarily you could do it with right-associative operators as well, but
in JavaScript the only binary right-associative operators are for
assignment, and the following is illegal:

  (a = b) = 1

---

You have to be very careful with + and - when generating minified code:

  + +1
  1 + +2

If a + or - is followed by another + or - and they aren't a ++ or --
operator, you must wrap in parens or add a space:

  +(+1)
  1+(+2)

  + +1
  1+ +2

---

function () { ... } may not appear on the left side of a statement. For
instance, all the following are illegal:

  function () {}
  function () {} + 1
  function () {}.bar
  function () {} ? 1 : 2
  function () {}(5)

You can make them legal by wrapping either the function or the entire
expression in parentheses:

  (function () {})
  (function () {}) + 1
  (function () {}).bar
  (function () {}) ? 1 : 2
  (function () {})(5)

  (function () {} + 1)
  (function () {}.bar)
  (function () {} ? 1 : 2)
  (function () {}(5))

This forces it to parse the function as an expression rather than as a
statement. This is true of object literals like {...} as well.

The following named functions are actually different:

  function foo() {}
  (function foo() {})

With the first one, the variable "foo" in the current scope is assigned to
the function.

With the second one, the variable "foo" refers to the unnamed function and is
only accessible in the body of the function.

---

Semicolons can be omitted in almost all situations, but two common situations
where they can't be omitted is when a line starts with [ or ( like in the
following examples:

  [].map.call()
  (1 + 2).bar

A simple (but ugly) workaround is to prefix the line with ;

  ;[].map.call()
  ;(1 + 2).bar

This is only a problem at the start of the line, which means the following are
legal and don't need a semicolon:

  var foo = [].map.call()
  return (1 + 2).bar

There may be other situations where the same problem occurs, but I have not
found them yet. Update this page if semicolon insertion causes problems in
other situations.

---

Something to be careful of when generating JavaScript code with a compiler:
the , operator needs to be wrapped in parentheses in the following situations:

  foo((1, 2), 3)
  [(1, 2), 3]
  { foo: (1, 2), bar: 3 }
  var foo = (1, 2), bar = 3

---

Trying to access a property on a number using the . syntax fails:

  1.foo

Instead, you can either double the . or wrap the number in parentheses:

  1..foo
  (1).foo

This is not an issue for floating point numbers:

  1.0.foo

---

The "function call" parentheses are actually a part of the new operator,
which means the following is illegal:

  (new Number)(5)

---

In ECMAScript 5, Unicode is allowed in identifiers, which means the following
is valid:

  var π = Math.PI;
  var λ = function() {};
  var ლ_ಠ益ಠ_ლ = 42;
  var ಠ_ಠ = eval;
  var foo = { H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙̞̪̗ͥͤͩ̾͑̔͐ͅṮ̴̷̷̗̼͍̿̿̓̽͐H̙̙̔̄͜: 42 };

This information is courtesy of <http://stackoverflow.com/a/9337047/449477>

---

If you leave off the {} of an if block, you need to place a semicolon between
the statement and the else block:

  if (1) 2
  if (1) 2; else 3
  if (1) 2; else if (3) 4
  if (1) 2; else if (3) 4; else 5

---

Spaces are *required* in the following places:

  break ...
  continue ...
  debugger ...
  return ...
  throw ...
  var ...
  new ...
  typeof ...
  void ...
  delete ...
  ... in ...
  ... instanceof ...

The following needs to be handled carefully. It may be necessary to insert
semicolons even with the single-statement version:

  do ... while
  switch(){case:... case:...}
